#!/usr/bin/env python
# encoding: utf-8

from waflib.Build import BuildContext
import os,re

APPNAME = 'property.exe'
LIBNAME = 'property'
VERSION = '0.0.1'

top = '.'
out = 'BUILD'

def options(ctx):
        ctx.load('compiler_cxx')
        ctx.add_option('--clang_uses_ext_stdlib', dest = 'clang_uses_ext_stdlib', help = 'Flag to clang use external stdlib')

def is_clang():
    try:
        cxx = os.environ['CXX']
    except:
        return False

    if re.match('clang.*', cxx):
        return True
    return False

def configure(ctx):
    #print('â†’ configuring the project in ' + ctx.path.abspath())
    ctx.load('compiler_cxx')
    ctx.load('clang_compilation_database')

    ctx.env.CXXFLAGS   = ['-ggdb3', '-std=c++11', '-Wall', '-Wpedantic', '-Werror', '-Wextra', '-Wshadow',]
    ctx.env.CXXFLAGS  += ['-Wformat=2',]
    ctx.env.LINKFLAGS  = ['-ggdb3']

    if is_clang():
        ctx.env.CXXFLAGS += ['-Weverything', '-Wno-c++98-compat', '-Wno-c++98-compat-pedantic', '-Wno-missing-prototypes']
        ctx.env.CXXFLAGS += ['-Wno-undefined-func-template',]

        if ctx.options.clang_uses_ext_stdlib == '1':
            ctx.env.CXXFLAGS  += ['-stdlib=libstdc++']
            ctx.env.LINKFLAGS += ['-lstdc++']
            #mycxxflags     += ['-stdlib=libc++']
            #mylinkflags    += ['-lc++']


def build(ctx):
    #for attr in dir(ctx):
        #print("obj.%s = %r" % (attr, getattr(ctx, attr)))

    ctx.program(
            target       = APPNAME,
            source       = ['main.cpp'],
            includes     = ['.'],
            linkflags    = ctx.env.LINKFLAGS,
            cxxflags     = ctx.env.CXXFLAGS,
            use          = [LIBNAME],
    )
    ctx.stlib(
            target       = LIBNAME,
            source       = ['options.cpp', 'config.cpp', 'utils.cpp', 'settings.cpp', 'settings_storage.cpp'],
            includes     = ['.'],
            linkflags    = ctx.env.LINKFLAGS,
            cxxflags     = ctx.env.CXXFLAGS,
    )
